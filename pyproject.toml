[build-system]
requires = ["hatchling", "jupyterlab==3.*"]
build-backend = "hatchling.build"

[project]
name = "anywidget"
description = "custom jupyter widgets made easy"
authors = [
    { name = "Trevor Manz", email = "trevor.j.manz@gmail.com" }
]
license = { text = "MIT" }
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.7"
dependencies = [
    "ipywidgets",
    "importlib_metadata ; python_version < '3.8'",
]

[project.optional-dependencies]
test = [
    "black[jupyter]",
    "pytest",
    "ruff==0.0.238",
    "psygnal",
]

[project.urls]
homepage = "https://github.com/manzt/anywidget"

[tool.hatch.build]
artifacts = [
    "anywidget/nbextension/index.*",
    "anywidget/labextension/*.tgz",
    "anywidget/labextension",
]

[tool.hatch.build.targets.wheel.shared-data]
"anywidget/nbextension" = "share/jupyter/nbextensions/anywidget"
"anywidget/labextension" = "share/jupyter/labextensions/anywidget"
"./anywidget.json" = "etc/jupyter/nbconfig/notebook.d/anywidget.json"

[tool.hatch.build.targets.sdist]
exclude = [
    ".github",
]

[tool.hatch.build.hooks.jupyter-builder]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = [
    "anywidget/nbextension/index.js",
    "anywidget/labextension/package.json",
]
skip-if-exists = [
    "anywidget/nbextension/index.js",
    "anywidget/labextension/package.json",
]
dependencies = [
    "hatch-jupyter-builder>=0.5.0",
]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build"

[tool.hatch.version]
path = "package.json"
pattern = "\"version\": \"(?P<version>.+?)\""

[tool.hatch.envs.default]
dependencies = [
    "black[jupyter]",
    "pytest",
    "ruff==0.0.238"
]

[tool.hatch.envs.default.scripts]
fmt = "black ."
lint = "ruff ."
test = "pytest ."


# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
filterwarnings = ["error:::anywidget"]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()"
]